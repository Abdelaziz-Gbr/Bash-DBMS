#!/usr/bin/bash

# ─── ANSI Colors ─────────────────────────────
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color



dbName=$1
dbPath="./mydb/$dbName"

# List tables (excluding metadata)
tables=($(ls "$dbPath" | grep -v '^\.' | grep -v '\.metadata$'))
if [[ ${#tables[@]} -eq 0 ]]; then
   echo -e "${RED}[Error] ❌ No tables in '$dbName'.${NC}"
  exit 1
fi

# Let user select a table (with a "Cancel" option)
options=( "${tables[@]}" "Cancel" )

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "${CYAN}[Info] 📋 Available Tables in '$dbName'${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
PS3="📌 Enter your choice (1-${#options[@]}): "
select tableName in "${options[@]}"; do
  case "$tableName" in
    "Cancel")
      echo -e "${YELLOW}[Info] 🔙 Returning to Menu...${NC}"
      exit 0
      ;;
    "")
      # Out of range or non‑numeric
      echo -e "${YELLOW}[Warning] ⚠️  Invalid selection. Please try again.${NC}"
      ;;
    *)
      tablePath="$dbPath/$tableName"
      metaFile="$dbPath/.${tableName}.metadata"

      if [[ ! -f "$tablePath" ]]; then
         echo -e "${RED}[Error] ❌ Table file '$tableName' not found. Try again.${NC}"
      elif [[ ! -f "$metaFile" ]]; then
         echo -e "${RED}[Error] ❌ Metadata for '$tableName' not found. Try again.${NC}"
      else
        # valid selection
        break
      fi
      ;;
  esac
done



# Load column names into array
metaCols=($(cut -d":" -f1 "$metaFile"))


# Show full table
echo -e "\n📂 ${CYAN}[Info] Selected Table: $tableName${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${CYAN}[Info] 📊 Content of Table '$tableName':${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

{
  echo "${metaCols[*]}" | tr ' ' ':'
  cat "$tablePath"
} | column -t -s ":"


# Loop to get valid column name or 0 to go back
while true; do
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  read -p $'🔎 Enter column name to filter (or 0 to go back): ' col
  if [[ "$col" == "0" ]]; then
     echo -e "${YELLOW}[Info] 🔙 Returning to Menu...${NC}"
    exit 0
  fi

  if [[ -z "$col" ]]; then
  echo -e "${YELLOW}[Warning] ⚠️  No input entered. Please try again.${NC}"
  continue
  fi

  idx=-1
  for i in "${!metaCols[@]}"; do
    if [[ "${metaCols[$i]}" == "$col" ]]; then
      idx=$((i+1))
      break
    fi
  done

  if [[ $idx -eq -1 ]]; then
    echo -e "${RED}[Error] ❌ Column '$col' not found. Try again.${NC}"
  else
    break
  fi
done


  # Get column type 
  metaTypes=($(cut -d":" -f2 "$metaFile"))
  colType=${metaTypes[$((idx-1))]}

  # numeric if int
  if [[ "$colType" == "INT" ]]; then
    numericCol=true
  else
    numericCol=false
     echo -e "${CYAN}[Info] ℹ️  Note: Type of column '$col' is '$colType'; only '=' comparisons are allowed.${NC}"
  fi
 

   # Loop to search values until user choose cancel
   while true; do
    # Pick operator 
    if $numericCol; then
      echo; echo -e "${BLUE}📐 Choose a comparison operator (or Cancel to go back):${NC}"
      echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      options=( "=" "!=" ">" "<" ">=" "<=" "Cancel" )
      PS3="🔢 Enter your choice (1-7): "
      select choice in "${options[@]}"; do
        case $REPLY in
          1) op="=="   ;;  # equality
          2) op="!="   ;;  # not‑equal
          3) op=">"    ;;  # greater
          4) op="<"    ;;  # less
          5) op=">="   ;;  # ge
          6) op="<="   ;;  # le
          7) echo -e "${YELLOW}[Info] 🔙 Returning to Menu...${NC}" ; exit 0 ;;
          *)   echo -e "${YELLOW}[Warning] ⚠️  Invalid selection. Please try again.${NC}" ; continue ;;
        esac
        break
      done
    else
      op="=="   # string or bool: only equality
    fi
    

     # Read the comparison value
     while true; do
       read -p "✏️  Enter value to match in '$col' with (or 0 to go back): " val
       if [[ -z "$val" ]]; then
          echo -e "${YELLOW}[Warning] ⚠️  No input entered. Please try again.${NC}"
         continue
         elif [[ "$val" == "0" ]]; then
          echo -e "${YELLOW}[Info] 🔙 Returning to Menu...${NC}"
         exit 0
       fi
       break
     done


    # Check for numeric values in case of numeric column
    if $numericCol ; then 
      if ! [[ "$val" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
        echo -e "${RED}[Error] ❌ Error: '$val' is not a valid number. Try again.${NC}"
        continue
      fi
    fi

     # Filtering
     result=$(awk -F":" -v c="$idx" -v v="$val" "\$c $op v" "$tablePath")
       echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
     if [[ -n "$result" ]]; then
        echo -e "\n${GREEN}[Success]✅ Rows where $col $op $val:${NC}"
        echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
       {
         echo "${metaCols[*]}" | tr ' ' ':'
         echo "$result"
       } | column -t -s ":"
     else
       echo -e "${YELLOW}[Info] 🔍 No matching records found.${NC}"
     fi

   done
