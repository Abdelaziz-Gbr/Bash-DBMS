#!/usr/bin/bash

# ─── ANSI Colors ─────────────────────────────
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[1;34m'
NC='\033[0m' # No Color



###### Checking for file's format and not created before
dbName=$1

while true; do
	clear
	echo -e "${CYAN}📁 [ Info ] Connected to database: '$dbName'${NC}"
	read -p $'\n📘 [ Info ] Enter file name to create (or type 0 to go back): ' fileName
	
	# 0 To go back
	if [[ $fileName == "0" ]]; then
		read -r -p $'\n🔙 [ Info ] Press any key to go back...' -n1 -s
		exit 1
	fi

	# Validate format: 4-12 letters only
	if [[ ! "$fileName" =~ ^[A-Za-z]{4,12}$ ]]; then
		echo -e "\n${YELLOW}⚠️  [ Warning ] Invalid name; use 4–12 letters (A–Z or a–z) only and no spaces.${NC}"
		read -n1 -r -p $'\n🔁 [ Info ] Press any key to retry...'
		continue
	fi

	# If file is found
	if [[ -f ./mydb/$dbName/$fileName ]]; then
		echo -e "${RED}❌ [ Error ] File with the same name already exists. Choose another!${NC}"
		read -r -p $'\n🔁 [ Info ] Press any key to try again...' -n1 -s
		continue

	fi
	break
done

######## Column Metadata Collection & File Creation

# Ask for number of columns
read -p $'\n📘 [ Info ] Enter number of columns: ' col_count

# Validate it's a number
if ! [[ "$col_count" =~ ^[1-9][0-9]*$ ]]; then
	echo -e "${RED}❌ [ Error ] Invalid number of columns.${NC}"
	exit 1
fi

# Prepare to collect names and metadata
metadata_content=""
col_names=()

for ((i = 1; i <= col_count; i++)); do
	# Column name input with validation & uniqueness
	while true; do
		if ((i == 1)); then
			echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
			echo -e "${BLUE}🔑 [ Info ] Column 1 is the Primary Key and can be of type (int/str)${NC}"
		fi
		read -p "Enter column $i name (2–12 letters): " col_name

		# 1) Format check: letters only, 2–12 chars
		if [[ ! "$col_name" =~ ^[A-Za-z]{2,12}$ ]]; then
			echo -e "${YELLOW}⚠️  [ Warning ] Invalid column name. Use 2–12 letters only, no spaces or numbers.${NC}"
			continue
		fi

		# 2) Uniqueness check
		duplicate=false
		for existing in "${col_names[@]}"; do
			if [[ "$existing" == "$col_name" ]]; then
				duplicate=true
				break
			fi
		done
		if $duplicate; then
			echo -e "${YELLOW}⚠️  [ Warning ] Column name '$col_name' is already used. Choose a different name.${NC}"
			continue
		fi

		# Passed both → record it
		col_names+=("$col_name")
		break
	done

	# Build metadata line
	if ((i == 1)); then
		# Ask type only int or str, default PK
		PS3="Enter data type for column 1 (1=INT, 2=STRING): "
		select col_type in "INT" "STRING"; do
			if [[ -n "$col_type" ]]; then
				metadata_content+=$(printf "%s:%s:%s" "$col_name" "$col_type" "1")
				break
			else
				echo -e "${RED}❌ [ Error ] Invalid choice. Please select 1 or 2.${NC}"
			fi
		done
	else
		# Other columns: ask full int, str, bool, default no PK
		PS3="Enter the data type for column $i (1=INT, 2=BOOLEAN, 3=STRING): "
		select col_type in "INT" "BOOLEAN" "STRING"; do
			if [[ -n "$col_type" ]]; then
				metadata_content+=$(printf "%s:%s:%s" "$col_name" "$col_type" "0")
				break
			else
				echo -e "${RED}❌ [ Error ] Invalid choice. Please select 1, 2, or 3.${NC}"
			fi
		done
	fi
	metadata_content+=$'\n'
done

# Only after successful input, create files
table_path="mydb/$dbName/$fileName"
meta_path="mydb/$dbName/.${fileName}.metadata"

touch "$table_path"
printf "%s" "$metadata_content" >"$meta_path"

echo -e "${CYAN}\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ [ Success ] Table '$fileName' created successfully in '$dbName'.${NC}"
read -r -p $'\n🔙 [ Info ] Press any key to return to the menu...' -n1 -s

exit 0
