#!/usr/bin/bash

# ━━━━━━━━━━━━[ 🎨 Color Definitions ]━━━━━━━━━━━━
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# ━━━━━━━━━━━━[ Parsing input ]━━━━━━━━━━━━
dbname=$1
table=$2
compareCol=$3
Value=$4
operator=$5
editCol=$6
newValue=$7

tablePath="./mydb/$dbname/$table"
metaPath="./mydb/$dbname/.$table.metadata"

# ━━━━━━━━━━━━[ Functions ]━━━━━━━━━━━━

init() {
    editColumnIndex=$(./getColumnIndex "$dbname" "$table" "$editCol")
    if [[ -z "$editColumnIndex" || $? -ne 0 ]]; then
        echo -e "${RED}❌ Column '$editCol' not found in table '$table'.${NC}"
        exit 1
    fi

    if [[ -z "$newValue" ]]; then
        echo -e "${YELLOW}⚠️  New value is missing.${NC}"
        exit 1
    fi

    primaryKeyCheck
    validateInput

    if [[ -z "$Value" || -z "$operator" || -z "$compareCol" ]]; then
        matchedRows=$(seq 1 "$(wc -l < "$tablePath")")
    else
        matchedRows=$(./getRows "$dbname" "$table" "$compareCol" "$Value" "$operator")
    fi

    if [[ "$matchedRows" == "-1" || -z "$matchedRows" ]]; then
        echo -e "${YELLOW}⚠️  No matching rows found.${NC}"
        exit 1
    fi

    updateRows "$matchedRows" "$tablePath" "$metaPath" "$editColumnIndex" "$newValue" "$ispk"
}

updateRows() {
    local matchedRows=$1
    local tablePath=$2
    local metaPath=$3
    local editColumnIndex=$4
    local newValue=$5
    local isPK=$6
    local numberOfColumns
    numberOfColumns=$(wc -l < "$metaPath")
    declare -i rowsAffected=0

    for row in $matchedRows; do
        line=$(sed -n "${row}p" "$tablePath")
        newline=''

        for i in $(seq 1 "$numberOfColumns"); do
            if [ "$i" -eq "$editColumnIndex" ]; then
                newline+="$newValue:"
            else
                newline+=$(echo "$line" | cut -d':' -f"$i"):
            fi
        done

        newline=${newline%:}
        sed -i "${row}s/.*/$newline/" "$tablePath"
        rowsAffected+=1

        if [[ "$isPK" -eq 1 ]]; then
            break
        fi
    done

    echo -e "${GREEN}✅ $rowsAffected row(s) affected.${NC}"
}

primaryKeyCheck() {
    isPK=0
    if grep -q "^$editCol:.*:1$" "$metaPath"; then
        isPK=1
        ./pkCheck "$dbname" "$table" "$editColumnIndex" "$newValue"
        if [ $? -eq 0 ]; then
            echo -e "${RED}❌ Primary key value '$newValue' already exists. Update aborted.${NC}"
            exit 1
        fi
    fi
}

validateInput() {
  validateComparison
  validateNewValue
}

validateComparison(){
  local columnType=$(./getType "$dbname" "$table" "$compareCol")
  if [[ -z "$columnType" ]]; then
      echo -e "${RED}❌ Column '$compareCol' not found in table '$table'.${NC}"
      exit 1
  fi
  inputValidatorResult=$(./inputValidator "$columnType" "$Value")

  if [[ "$inputValidatorResult" != "0" ]]; then
      echo -e "${RED}❌ Invalid value for column $editCol of type $columnType.${NC}"
      exit 1
  fi

  if [[ "$operator" == ">" || "$operator" == "<" ]] && [[ "$columnType" != "INT" ]]; then
      echo -e "${RED}❌ Invalid operator '$operator' for column type '$columnType'. Only INT columns can use > or < operators.${NC}"
      exit 1
  fi

}
validateNewValue(){
  local columnType=$(./getType "$dbname" "$table" "$editCol")
  if [[ -z "$columnType" ]]; then
      echo -e "${RED}❌ Column '$compareCol' not found in table '$table'.${NC}"
      exit 1
  fi
  inputValidatorResult=$(./inputValidator "$columnType" "$newValue")

  if [[ "$inputValidatorResult" != "0" ]]; then
      echo -e "${RED}❌ Invalid value for column $editCol of type $columnType.${NC}"
      exit 1
  fi
}

# ━━━━━━━━━━━━[ Script Entry Point ]━━━━━━━━━━━━
init
