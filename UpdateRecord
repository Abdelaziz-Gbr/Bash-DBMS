#!/usr/bin/bash

# ━━━━━━━━━━━━[ 🎨 Color Definitions ]━━━━━━━━━━━━
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# This script updates a specific entry in a table file.

dbname=$1
table=$2
columnName=$3
Value=$4
operator=$5
newValue=$6
columnIndex=$(./getColumnIndex "$dbname" "$table" "$columnName")
if [[ -z "$columnName" || -z "$newValue" ]]; then
  echo -e "${YELLOW}⚠️  Usage: $0 <dbname> <table> <columnName> <Value> <operator> <newValue>${NC}"
  exit 1
fi
if [[ -z "$columnIndex" || $? -ne 0 ]]; then
  echo -e "${RED}❌ Column '$columnName' not found in table '$table'.${NC}"
  exit 1
fi

if [[ -z "$Value" || -z "$operator" ]]; then
  #update all rows in the table
  Value='@'
  operator='!='
fi

tablePath="./mydb/$dbname/$table"
metaPath="./mydb/$dbname/.$table.metadata"
numberOfColumns=$(wc -l < $metaPath)
matchedRows=$(./getRows "$dbname" "$table" "$columnName" "$Value" "$operator")

if [[ $? -ne 0 ]]; then
  echo -e "${RED}❌ Error retrieving rows. Please check the inputs.${NC}"
  exit 1
fi

if [[ "$matchedRows" == "-1" || -z "$matchedRows" ]]; then
  echo -e "${YELLOW}⚠️  No matching rows found.${NC}"
  exit 1
fi

#reverse order the matched rows to update the last row first
# this is to avoid issues with line numbers changing after each update
matchedRows=$(echo "$matchedRows" | tr ' ' '\n' | sort -r | tr '\n' ' ')

## check if this column is primary key
metaData="./mydb/$dbname/.$table.metadata"
isPK=0
if grep -q "^$columnName:.*:1$" "$metaData"; then
    isPK=1
    ./pkCheck "$dbname" "$table" "$columnIndex" "$newValue"
    if [ $? -eq 0 ]; then
        echo -e "${RED}❌ Primary key value '$newValue' already exists. Update aborted.${NC}"
        exit 1  
    fi
fi

#check if the entered value is valid for this column
columnType=$(grep "^$columnName:" "$metaData" | cut -d: -f2)
inputValidatorResult=$(./inputValidator "$columnType" "$newValue")
if [[ "$inputValidatorResult" != "0" ]]; then
    echo -e "${RED}❌ Invalid value for column $columnName of type $columnType.${NC}"
    exit 1
fi

columnIndex=$(./getColumnIndex "$dbname" "$table" "$columnName")

declare -i rowsAffected=0

for row in $matchedRows; do

    line=$(sed -n "${row}p" "$tablePath")
    newline=''
    for i in $(seq 1 $numberOfColumns); do
    if [ $i -eq "$columnIndex" ]; then
        newline+="$newValue:"
    else
        newline+=$(echo "$line" | cut -d':' -f"$i"):
    fi
    done
    # remove the trailing colon
    newline=${newline%:}
    # finally, replace the old line with the new one in the table file
    sed -i "${row}s/.*/$newline/" "$tablePath"
    rowsAffected+=1
    
    if [[ $isPK -eq 1 ]]; then
        #end after updating the row since it is a primary key
        break
    fi

done

echo -e "${GREEN}✅ $rowsAffected row(s) affected.${NC}"