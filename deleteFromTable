#!/usr/bin/bash


# ─── ANSI Colors ─────────────────────────────
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color



dbName=$1
dbPath="./mydb/$dbName"

# List tables (excluding metadata)
tables=($(ls "$dbPath" | grep -v '^\.' | grep -v '\.metadata$'))
if [[ ${#tables[@]} -eq 0 ]]; then
  echo -e "${RED}[Error] ❌ No tables in '$dbName'.${NC}"
  exit 1
fi

# Let user select a table (with a "Cancel" option)
options=( "${tables[@]}" "Cancel" )

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo -e "${CYAN}[Info] 📋 Available Tables in '$dbName'${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
PS3="📌 Enter your choice (1-${#options[@]}): "
select tableName in "${options[@]}"; do
  case "$tableName" in
    "Cancel")
      echo -e "${YELLOW}[Info] 🔙 Returning to Menu...${NC}"
      exit 0
      ;;
    "")
      # Out of range or non‑numeric
      echo -e "${YELLOW}[Warning]⚠️  Invalid selection. Please try again.${NC}"
      ;;
    *)
      tablePath="$dbPath/$tableName"
      metaFile="$dbPath/.${tableName}.metadata"

      if [[ ! -f "$tablePath" ]]; then
         echo -e "${RED}[Error] ❌ Table file '$tableName' not found. Try again.${NC}"
      elif [[ ! -f "$metaFile" ]]; then
         echo -e "${RED}[Error] ❌ Metadata for '$tableName' not found. Try again.${NC}"
      else
        # valid selection
        break
      fi
      ;;
  esac
done

# Load column names into array
metaCols=($(cut -d":" -f1 "$metaFile"))

while true; do

  # Show full table
  echo -e "\n📂 ${CYAN} Selected table: $tableName${NC}"

  # Check for empty table file
  if [[ ! -s "$tablePath" ]]; then
    echo -e "${YELLOW}[Warning] ⚠️  Table file is empty.${NC}"
    read -r -p 'Press any key to return to menu ...' -n1 -s
    exit 0
  fi


  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo -e "${CYAN}[Info] 📊 Content of Table $tableName${NC}"
  echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
  {
    echo "${metaCols[*]}" | tr ' ' ':'
    cat "$tablePath"
  } | column -t -s ":"


  # Choose column
  while true; do
  
  read -p "Enter column name to filter, or '*' to delete ALL rows, or '0' to exit): " col

  # If user wants to clear the entire table:
  if [[ "$col" == "*" ]]; then
  read -p 'Type "SURE" to confirm: ' confirm

    if [[ "$confirm" == "SURE" ]]; then
       > "$tablePath"
       > "$metaFile"
       read -r -p "All rows deleted from table '$tableName'."  -n1 -s
       exit 0
    else
      echo -e "${YELLOW}⚠️  To confirm deletion, type 'SURE'.${NC}"
      continue
    fi
  fi

  
  if [[ "$col" == "0" ]]; then
    echo "${YELLOW}[Info] 🔙 Returning to menu."
    exit 0
  fi

  if [[ -z "$col" ]]; then
  echo -e "${YELLOW}[Warning] ⚠️  No input entered. Please try again.${NC}"
  continue
  fi

  idx=-1
  for i in "${!metaCols[@]}"; do
    if [[ "${metaCols[$i]}" == "$col" ]]; then
      idx=$((i+1))
      break
    fi
  done

  if (( idx == -1 )); then
    echo -e "${RED}[Error] ❌ Column '$col' not found. Try again.${NC}"
  else
    break
  fi
 done

  # Value and deletion loop
  while true; do

    read -p "Enter value to delete in '$col' (or 0 to exit): " val
    if [[ "$val" == "0" ]]; then
     echo -e "${YELLOW}[Info] 🔙 Exiting.${NC}"
     exit 0
    fi


    # awk to select only matching rows
    result=$(awk -v c="$idx" -v v="$val" '
    BEGIN {
      FS = ":"
    }
    # For each line where field c equals v, print the line
    { if ($c == v) 
      print
    }' "$tablePath")

    if [[ -z "$result" ]]; then
      echo -e "${YELLOW}[Info] 🔍 No matching records found.${NC}"
      else
      # build new table without those rows
      newTable=$(awk -v c="$idx" -v v="$val" '
      BEGIN {
        FS=OFS=":"
        } 
        { if ($c!=v)
            print 
        }' "$tablePath")
      
      # overwrite the table
      echo "$newTable" > "$tablePath"
      echo -e "${GREEN}[Success]✅ Deleted rows where $col = '$val'.${NC}"
    
     {
       echo "${metaCols[*]}" | tr ' ' ':'
       echo "$result"
     } | column -t -s ":"
    
     # Show updated table:
     echo -e "\n${CYAN}[Info] 📋 Updated content of $tableName:${NC}"
     echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
     {
       echo "${metaCols[*]}" | tr ' ' ':'
       echo "$newTable"
     } | column -t -s ":"
     read -r -p "Press any key to try again..." -n1 -s
     break
     #exit 0  
   fi
 done

  clear

done
